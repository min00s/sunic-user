package com.sunic.user.aggregate.user.logic;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.sunic.user.aggregate.user.store.UserStore;
import com.sunic.user.spec.user.entity.DeactivatedUser;
import com.sunic.user.spec.user.entity.DeactivatedUserProfile;
import com.sunic.user.spec.user.entity.DeactivationReason;
import com.sunic.user.spec.user.entity.User;
import com.sunic.user.spec.user.entity.UserProfile;
import com.sunic.user.spec.user.exception.InvalidCredentialsException;
import com.sunic.user.spec.user.exception.UserAlreadyExistsException;
import com.sunic.user.spec.user.exception.UserNotFoundException;
import com.sunic.user.spec.user.facade.sdo.UserActivateSdo;
import com.sunic.user.spec.user.facade.sdo.UserDeactivateByAdminSdo;
import com.sunic.user.spec.user.facade.sdo.UserJoinSdo;
import com.sunic.user.spec.user.facade.sdo.UserLoginRdo;
import com.sunic.user.spec.user.facade.sdo.UserLoginSdo;
import com.sunic.user.spec.user.facade.sdo.UserRegisterSdo;
import com.sunic.user.spec.userworkspace.entity.UserWorkspace;
import com.sunic.user.spec.userworkspace.exception.UserWorkspaceAlreadyExistsException;
import com.sunic.user.spec.userworkspace.exception.WorkspaceNotFoundException;

import lombok.RequiredArgsConstructor;
// EmailService.java
import lombok.RequiredArgsConstructor;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
// UserService.java
@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;
    private final EmailService emailService; // EmailService 의존성 주입

    @Transactional
    public void requestEmailVerification(Long userId) {
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new UserNotFoundException("사용자를 찾을 수 없습니다."));

        // 1. 랜덤 인증 코드 생성
        String verificationCode = generateRandomCode(); 
        
        // 2. 생성된 코드를 사용자 정보에 저장
        user.setVerificationCode(verificationCode);
        userRepository.save(user);

        // 3. EmailService를 통해 인증 메일 발송
        emailService.sendVerificationEmail(user.getEmail(), verificationCode);
    }

    private String generateRandomCode() {
        // 6자리 랜덤 숫자 생성 로직
        return String.valueOf((int) (Math.random() * 899999) + 100000);
    }
    // ...
}
@RequiredArgsConstructor
public class EmailService {

    private final JavaMailSender mailSender; // Spring의 메일 발송 의존성 주입

    public void sendVerificationEmail(String toEmail, String verificationCode) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(toEmail);
        message.setSubject("[SUNIC] 이메일 인증을 완료해주세요.");
        message.setText("인증 코드: " + verificationCode);
        mailSender.send(message);
    }
}
@Component
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class UserLogic {
	private final UserStore userStore;
	private final PasswordEncoder passwordEncoder;

	@Transactional
	public void registerUser(UserRegisterSdo userRegisterSdo) {
		if (userStore.existsByEmail(userRegisterSdo.getEmail())) {
			throw new UserAlreadyExistsException("User with email already exists: " + userRegisterSdo.getEmail());
		}

		User user = User.create(userRegisterSdo, passwordEncoder.encode(userRegisterSdo.getPassword()));
		userStore.save(user);

		if (userRegisterSdo.getUserProfile() != null) {
			UserProfile userProfile = UserProfile.create(user.getId(), userRegisterSdo.getUserProfile());
			userStore.saveUserProfile(userProfile);
		}
	}

	public UserLoginRdo loginUser(UserLoginSdo userLoginSdo) {
		User user = userStore.findByEmail(userLoginSdo.getEmail())
			.orElseThrow(() -> new InvalidCredentialsException("Invalid email or password"));

		if (!passwordEncoder.matches(userLoginSdo.getPassword(), user.getPassword())) {
			user.updateLoginFailCount();
			userStore.save(user);
			throw new InvalidCredentialsException("Invalid email or password");
		}

		user.resetLoginFailCount();
		userStore.save(user);

		UserProfile userProfile = userStore.findUserProfileByUserId(user.getId()).orElse(null);
		User userWithProfile = user.withUserProfile(userProfile);

		return userWithProfile.toLoginRdo();
	}

	@Transactional
	public void activateUser(UserActivateSdo userActivateSdo) {
		DeactivatedUser deactivatedUser = userStore.findDeactivatedUserByEmail(userActivateSdo.getEmail());

		DeactivatedUserProfile deactivatedUserProfile = userStore.findDeactivatedUserProfileByUserId(
			deactivatedUser.getId()).orElse(null);
		UserProfile userProfile = null;
		if (deactivatedUserProfile != null) {
			userProfile = UserProfile.builder()
				.id(deactivatedUserProfile.getId())
				.userId(deactivatedUserProfile.getUserId())
				.nickName(deactivatedUserProfile.getNickName())
				.univName(deactivatedUserProfile.getUnivName())
				.univYear(deactivatedUserProfile.getUnivYear())
				.univSemester(deactivatedUserProfile.getUnivSemester())
				.majorCategory(deactivatedUserProfile.getMajorCategory())
				.majorName(deactivatedUserProfile.getMajorName())
				.profileImgUrl(deactivatedUserProfile.getProfileImgUrl())
				.build();
		}

		User user = User.fromDeactivateUser(deactivatedUser, userProfile);

		userStore.deleteDeactivatedUser(deactivatedUser);
		userStore.save(user);

		if (userProfile != null) {
			userStore.saveUserProfile(userProfile);
		}
	}

	public void deactivateUserByAdmin(UserDeactivateByAdminSdo userDeactivateByAdminSdo) {
		checkAdminUser(userDeactivateByAdminSdo.getAdminId());

		deactivateUser(userDeactivateByAdminSdo.getUserId(), DeactivationReason.AdminExit);
	}

	public void deactivateUserByUser(Integer userId) {
		if (userId == null) {
			throw new InvalidCredentialsException("Invalid user id");
		}

		deactivateUser(userId, DeactivationReason.UserExit);
	}

	@Transactional
	private void deactivateUser(int userId, DeactivationReason deactivationReason) {
		User user = userStore.findById(userId)
			.orElseThrow(() -> new UserNotFoundException("User not found with id: " + userId));

		UserProfile userProfile = userStore.findUserProfileByUserId(userId).orElse(null);
		
		DeactivatedUser du = DeactivatedUser.fromUser(user, deactivationReason);
		userStore.saveDeactivatedUser(du);

		if (userProfile != null) {
			DeactivatedUserProfile deactivatedUserProfile = DeactivatedUserProfile.fromUserProfile(userProfile);
			userStore.saveDeactivatedUserProfile(deactivatedUserProfile);
			userStore.deleteUserProfileByUserId(userId);
		}
		
		userStore.deleteUser(user);
	}

	@Transactional
	public void deactivateDormancyUser() {
		LocalDateTime oneYearAgo = LocalDateTime.now().minusYears(1);
		List<User> inactiveUsers = userStore.findUsersInactiveForMoreThanOneYear(oneYearAgo);

		for (User user : inactiveUsers) {
			UserProfile userProfile = userStore.findUserProfileByUserId(user.getId()).orElse(null);
			
			DeactivatedUser deactivatedUser = DeactivatedUser.fromUser(user, DeactivationReason.Dormancy);
			userStore.saveDeactivatedUser(deactivatedUser);

			if (userProfile != null) {
				DeactivatedUserProfile deactivatedUserProfile = DeactivatedUserProfile.fromUserProfile(userProfile);
				userStore.saveDeactivatedUserProfile(deactivatedUserProfile);
				userStore.deleteUserProfileByUserId(user.getId());
			}
			
			userStore.deleteUser(user);
		}
	}

	@Transactional
	public void joinWorkspace(UserJoinSdo userJoinSdo) {
		User user = userStore.findById(userJoinSdo.getUserId())
			.orElseThrow(() -> new UserNotFoundException("User not found with id: " + userJoinSdo.getUserId()));

		UserWorkspace workspace = userStore.findWorkspaceById(userJoinSdo.getWorkspaceId())
			.orElseThrow(
				() -> new WorkspaceNotFoundException("Workspace not found with id: " + userJoinSdo.getWorkspaceId()));

		if (user.getUserWorkspaces() != null && user.getUserWorkspaces().contains(workspace)) {
			throw new UserWorkspaceAlreadyExistsException("Already joined to this workspace");
		}

		userStore.save(user);
	}

	public boolean checkUser(int userId) {
		return userStore.findById(userId).isPresent();
	}

	public boolean checkAdminUser(int userId) {
		return userStore.findById(userId)
			.map(User::isAdmin)
			.orElse(false);
	}
}

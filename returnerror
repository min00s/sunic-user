// UserNotFoundException.java
public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}
// UserService.java
@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;

    public UserDto findUserById(Long userId) {
        // 개선: 명확한 커스텀 예외를 발생시킴
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new UserNotFoundException("ID가 " + userId + "인 사용자를 찾을 수 없습니다."));
            
        return new UserDto(user);
    }
}
// GlobalExceptionHandler.java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice // 모든 @RestController에서 발생하는 예외를 전역적으로 처리
public class GlobalExceptionHandler {

    @ExceptionHandler(UserNotFoundException.class) // UserNotFoundException이 발생하면 이 메서드가 처리
    public ResponseEntity<ErrorResponse> handleUserNotFoundException(UserNotFoundException ex) {
        ErrorResponse response = new ErrorResponse("USER_NOT_FOUND", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND); // 404 상태 코드와 에러 메시지 반환
    }
    
    // ... 다른 예외 핸들러들
}
